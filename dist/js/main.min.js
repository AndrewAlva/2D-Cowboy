function makeTheGame () {var FPS = 30; setInterval(function(){update(); draw(); },1000/FPS); var bgImg = document.getElementById("iBg"); var gameFloor = 65; var canvasWidth = 1000; var canvasHeight = 652; var c = document.getElementById("playArea"); c.setAttribute("width", canvasWidth); c.setAttribute("height", canvasHeight); var ctx = c.getContext("2d"); var gameOver = false; var resetOn = false; var widthPlayer = 80; var heightPlayer = 65; var posXPlayer = canvasWidth / 2; var posYPlayer = canvasHeight - heightPlayer - gameFloor; var jumpPower = 0; var jumpBoolean = false; var jumpUp = false; var jumpDown = false; var player = {color: "#00A", x: posXPlayer, y: posYPlayer, width: widthPlayer, height: heightPlayer, lookRight: true, speed: 10, imgR: document.getElementById("iPR"), imgL: document.getElementById("iPL"), draw: function(playerSprite) {ctx.drawImage(playerSprite,this.x,this.y); }, moveRight: function(){this.x += this.speed; this.lookRight = true; }, moveLeft: function(){this.x -= this.speed; this.lookRight = false; }, gravity: 1.8, jumpHeight: 15, jumping: function(){this.y += jumpPower; if (jumpBoolean && jumpUp){jumpPower -= player.gravity; if (jumpPower <= player.jumpHeight * -1){jumpUp = false; jumpDown = true; } } if (jumpBoolean && jumpDown){jumpPower += player.gravity; if (player.y >= canvasHeight - heightPlayer - gameFloor) {jumpDown = false; jumpBoolean = false; jumpPower = 0; player.y = canvasHeight - heightPlayer - gameFloor; } } }, bullets:[], shoot: function(){var bulletPosition = this.midpoint(); if (player.lookRight){player.bullets.push(Bullet({speed: 5, x: bulletPosition.x, y: bulletPosition.y })); } else {player.bullets.push(Bullet({speed: -5, x: bulletPosition.x, y: bulletPosition.y })); } userInterface.bullets += 1; userInterface.score -= 2; if (userInterface.score < 0){userInterface.score = 0; } }, midpoint: function(){if (playerOrientation == player.imgR) {return {x: this.x + this.width - 5, y: this.y + this.height/2 + 9 } } else {return {x: this.x, y: this.y + this.height/2 + 9 } } } }; var playerOrientation = player.imgR; var startScreen = document.getElementById("startScreen"); var resetScreen = document.getElementById("resetScreen"); startScreen.classList.add("hidden"); Mousetrap.bind("right", function() {player.moveRight(); playerOrientation = player.imgR; }); Mousetrap.bind("left", function() {player.moveLeft(); playerOrientation = player.imgL; }); Mousetrap.bind("up", function() {if (jumpBoolean == false) {jumpBoolean = true; jumpUp = true; } }); Mousetrap.bind("space", function() {player.shoot(); }); Mousetrap.bind("esc", function() {if(resetOn){gameOver = false; resetScreen.classList.add("hidden"); ctx.clearRect(0, 0, canvasWidth, canvasHeight); player.x = canvasWidth / 2; player.y = canvasHeight - heightPlayer - gameFloor; player.speed = 10; player.bullets = []; userInterface.bullets = 0; userInterface.score = 0; userInterface.difficult = 1; enemiesA = []; enemiesB = []; resetOn = false; } }); function Bullet(I) {I.active = true; I.xVelocity = I.speed; I.yVelocity = 0; I.width = 5; I.height = 4; I.color = "#ffffff"; I.inBounds = function() {return I.x >= 0 && I.x <= canvasWidth && I.y >= 0 && I.y <= canvasHeight; }; I.draw = function() {ctx.fillStyle = this.color; ctx.fillRect(this.x, this.y, this.width, this.height); }; I.update = function() {I.x += I.xVelocity; I.y += I.yVelocity; I.active = I.active && I.inBounds(); }; return I; } enemiesA = []; function EnemyA(I) {I = I || {}; I.active = true; I.img = document.getElementById("iE2"), I.width = 50; I.height = 57; I.x = canvasWidth - I.width; I.y = canvasHeight - I.height - gameFloor; I.xVelocity = -2; I.inBounds = function() {return I.x >= 0 && I.x <= canvasWidth && I.y >= 0 && I.y <= canvasHeight; }; I.draw = function() {ctx.drawImage(this.img,this.x,this.y); }; I.update = function() {I.x += I.xVelocity; I.xVelocity = -5; I.active = I.active && I.inBounds(); }; I.explode = function() {this.active = false; }; return I; }; enemiesB = []; function EnemyB(I) {I = I || {}; I.active = true; I.img = document.getElementById("iE1"), I.width = 50; I.height = 57; I.x = I.width; I.y = canvasHeight - I.height - gameFloor; I.xVelocity = 1.5; I.inBounds = function() {return I.x >= 0 && I.x <= canvasWidth && I.y >= 0 && I.y <= canvasHeight; }; I.draw = function() {ctx.drawImage(this.img,this.x,this.y); }; I.update = function() {I.x += I.xVelocity; I.xVelocity = 5; I.active = I.active && I.inBounds(); }; I.explode = function() {this.active = false; }; return I; }; var obstacle1 = {width: 50, height: 206, x: 200, y: canvasHeight - gameFloor - 206, img: document.getElementById("iO1"), draw: function() {ctx.drawImage(this.img,this.x,this.y); } }; var obstacle2 = {width: 59, height: 50, x: canvasWidth -400, y: canvasHeight - gameFloor - 130, img: document.getElementById("iO2"), draw: function() {ctx.drawImage(this.img,this.x,this.y); } }; setInterval(function(){userInterface.difficult += 1; player.speed += 5; },10000); function collides(a, b) {return a.x < b.x + b.width && a.x + a.width > b.x && a.y < b.y + b.height && a.y + a.height > b.y; } function handleCollisions() {player.bullets.forEach(function(bullet) {enemiesA.forEach(function(enemy) {if (collides(bullet, enemy)) {enemy.explode(); bullet.active = false; userInterface.score += 5; } }); }); player.bullets.forEach(function(bullet) {enemiesB.forEach(function(enemy) {if (collides(bullet, enemy)) {enemy.explode(); bullet.active = false; userInterface.score += 5; } }); }); enemiesA.forEach(function(enemy) {if (collides(enemy, player)) {gameOver = true; resetOn = true; resetScreen.classList.remove("hidden"); } }); enemiesB.forEach(function(enemy) {if (collides(enemy, player)) {gameOver = true; resetOn = true; resetScreen.classList.remove("hidden"); } }); if(collides(player,obstacle1)){player.x = obstacle1.x + obstacle1.width; } if(collides(player,obstacle2)){player.y = obstacle2.y + obstacle2.height; } } var userInterface = {titleContent: "2D Cowboy", titleX: canvasWidth / 2, titleY: 20, titleStyle: "18px Helvetica", titleFill: "#fff", titleAlign: "center", userContent: "Player 1", userY: 30, userFill: "#00ffff", genX: 50, genStyle: "15px Helvetica", genFill: "#eee", genAlign: "left", bulletsName: "Bullets Fired: ", bullets: 0, bulletsY: 60, scoreName: "Score: ", score: 0, scoreY: 80, difficultName: "Difficult: ", difficult: 1, difficultY: 100, displayInfo: function(styleInfo, fillColor, styleAlign, textContent, textX, textY){ctx.font = styleInfo; ctx.fillStyle = fillColor; ctx.textAlign = styleAlign; ctx.fillText(textContent, textX, textY); }, }; function update (x) {player.jumping(); player.bullets.forEach(function(bullet) {bullet.update(); }); player.bullets = player.bullets.filter(function(bullet) {return bullet.active; }); enemiesA.forEach(function(enemy) {enemy.update(); }); enemiesA = enemiesA.filter(function(enemy) {return enemy.active; }); if(Math.random() < userInterface.difficult / 50) {enemiesA.push(EnemyA()); } enemiesB.forEach(function(enemy) {enemy.update(); }); enemiesB = enemiesB.filter(function(enemy) {return enemy.active; }); if(Math.random() < userInterface.difficult / 50) {enemiesB.push(EnemyB()); } handleCollisions(); } function draw (x) {ctx.clearRect(0, 0, canvasWidth, canvasHeight); ctx.drawImage(bgImg,0,0); player.draw(playerOrientation); obstacle1.draw(); obstacle2.draw(); userInterface.displayInfo( userInterface.titleStyle, userInterface.titleFill, userInterface.titleAlign, userInterface.titleContent, userInterface.titleX, userInterface.titleY  ); userInterface.displayInfo( userInterface.genStyle, userInterface.userFill, userInterface.genAlign, userInterface.userContent, userInterface.genX, userInterface.userY  ); userInterface.displayInfo( userInterface.genStyle, userInterface.genFill, userInterface.genAlign, userInterface.bulletsName + userInterface.bullets, userInterface.genX, userInterface.bulletsY  ); userInterface.displayInfo( userInterface.genStyle, userInterface.genFill, userInterface.genAlign, userInterface.scoreName + userInterface.score, userInterface.genX, userInterface.scoreY  ); userInterface.displayInfo( userInterface.genStyle, userInterface.genFill, userInterface.genAlign, userInterface.difficultName + userInterface.difficult, userInterface.genX, userInterface.difficultY  ); player.bullets.forEach(function(bullet) {bullet.draw(); }); enemiesA.forEach(function(enemy) {enemy.draw(); }); enemiesB.forEach(function(enemy) {enemy.draw(); }); if (gameOver) {ctx.clearRect(0, 0, canvasWidth, canvasHeight); ctx.fillStyle = "#404040"; ctx.fillRect(0, 0, canvasWidth, canvasHeight); }; } }